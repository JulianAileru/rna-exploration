#Quality Control, Tool: FastQC
#Phase I Read Alignment, Tool: STAR
#Phase II Transcript Quantification, Tool: featureCounts 

import os
import yaml
import glob
from utils.helper_functions import *
configfile: "config.yaml"

def get_samples(folder):
  lst = os.listdir(folder)
  lst = [x.split("_")[0] for x in lst]
  return list(set(lst))

with(open("params/trim_galore_params.yaml")) as f1:
  trim_galore_params = yaml.safe_load(f1)


SAMPLES = get_samples(folder='data/raw-reads')
genome = config['reference_genome']
rule all:
  input:
# ---Quality-Control---
    # FastQC Check 
    expand("pre-processing/{sample}_1_fastqc.html", sample=SAMPLES),
    expand("pre-processing/{sample}_2_fastqc.html", sample=SAMPLES),
    # Trim Reads 
    expand("data/trimmed_reads/{sample}_1_val_1.fq",sample=SAMPLES),
    expand("data/trimmed_reads/{sample}_2_val_2.fq",sample=SAMPLES),
    # FastQC Check 
    expand("post-processing/{sample}_1_val_1_fastqc.html", sample=SAMPLES),
    expand("post-processing/{sample}_2_val_2_fastqc.html", sample=SAMPLES),
    # MultiQC report 
    "multiqc/multiqc_report.html",
# ---Read Alignment (PhaseI)---
    # Build Reference Genome
    "reference/genome-index/genome.1.ht2",
    # Map Reads to Reference Genome
    expand("data/sam-files/{sample}.sam",sample=SAMPLES),
# ---Read Quantification (PhaseII)---
    # Convert to BAM
    expand("data/bam-files/{sample}.bam",sample=SAMPLES),
    # Get FeatureCounts Table
    "results/final_counts.txt"


rule fastqc_preprocessing:
  input:
    r1 = "data/raw-reads/{sample}_1.fastq",
    r2 = "data/raw-reads/{sample}_2.fastq"
  output:
    r1_report = "pre-processing/{sample}_1_fastqc.html",
    r2_report = "pre-processing/{sample}_2_fastqc.html"
  conda:
    "envs/fastqc-env.yaml"
  shell:
    """
    fastqc {input.r1} {input.r2} -o pre-processing
    """

rule trim_galore:
  input:
    r1 = "data/raw-reads/{sample}_1.fastq",
    r2 = "data/raw-reads/{sample}_2.fastq"
  output:
    "data/trimmed_reads/{sample}_1_val_1.fq",
    "data/trimmed_reads/{sample}_2_val_2.fq"
  conda:
    "envs/trim-env.yaml"
  params:
    quality = trim_galore_params['quality'],
    length = trim_galore_params['length'],
    clip_R1 = trim_galore_params['clip_R1'],
    clip_R2 = trim_galore_params['clip_R2']
  shell:
    "trim_galore --phred33 --quality {params.quality} --illumina --length {params.length} "
    "--paired --output_dir data/trimmed_reads/ --clip_R1 {params.clip_R1} --clip_R2 {params.clip_R2} {input.r1} {input.r2}"

rule fastqc_postprocessing:
  input:
    r1 = expand("data/trimmed_reads/{sample}_1_val_1.fq",sample=SAMPLES),
    r2 = expand("data/trimmed_reads/{sample}_2_val_2.fq",sample=SAMPLES)
  output:
    r1_report = "post-processing/{sample}_1_val_1_fastqc.html",
    r2_report = "post-processing/{sample}_2_val_2_fastqc.html"
  conda:
    "envs/fastqc-env.yaml"
  shell:
    "fastqc {input.r1} {input.r2} -o post-processing"

rule multiqc_trim:
  input:
    expand("pre-processing/{sample}_1_fastqc.html", sample=SAMPLES) +
    expand("pre-processing/{sample}_2_fastqc.html", sample=SAMPLES) +
    expand("post-processing/{sample}_1_val_1_fastqc.html", sample=SAMPLES) +
    expand("post-processing/{sample}_2_val_2_fastqc.html", sample=SAMPLES)
  output:
    "multiqc/multiqc_report.html"
  conda:
    "envs/multiqc-env.yaml"
  shell:
     "multiqc pre-processing post-processing -o multiqc"


rule hisat_build_index:
  input:
    genome = f"reference/{genome}"
  output:
    "reference/genome-index/genome.1.ht2",
    "reference/genome.fa"
  conda:
    "envs/hisat2-env.yaml"
  shell:
    """
    mkdir -p reference/genome-index
    gunzip -c {input.genome} > reference/genome.fa
    hisat2-build reference/genome.fa reference/genome-index/genome
    """

rule hisat_map_reads:
  input:
    r1 = "data/trimmed_reads/{sample}_1_val_1.fq",
    r2 = "data/trimmed_reads/{sample}_2_val_2.fq",
  output:
    "data/sam-files/{sample}.sam"
  conda:
    "envs/hisat2-env.yaml"
  shell:
    "hisat2 -x reference/genome-index/genome -1 {input.r1} -2 {input.r2} -S {output}"

rule convert_to_bam:
  input:
    "data/sam-files/{sample}.sam"
  output:
    bam = "data/bam-files/{sample}.bam",
    sorted_bam = "data/bam-files/{sample}_sorted.bam"
  conda:
    "envs/samtools-env.yaml"
  shell:
    """
    samtools view -bS {input} > {output.bam}
    samtools sort {output.bam} -o {output.sorted_bam}
    """

rule get_counts_matrix:
  input:
    sorted_bam_files = expand("data/bam-files/{sample}_sorted.bam",sample=SAMPLES),
    gtf = f"reference/{config['reference_genome_gtf']}"
  output:
    f1 = "results/final_counts.txt",
    f2 = "results/final_counts.txt.summary"
  conda:
    "envs/featureCounts-env.yaml"
  shell:
    """
    featureCounts -p -O -a {input.gtf} -o {output.f1} {input.sorted_bam_files}
    """


  
